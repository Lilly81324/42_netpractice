This exercise is about Routing

We have a Router, with fixed Interfaces for 2 Subnets
R1:	IP: 92.128.98.126	Mask: 255.255.255.128
R2:	IP: 166.89.5.254	Mask: 255.255.192.0

We get two PC interfaces, which each get a route.
PC Bs routes target is fixed to "default"

First things first.
We want to put our PCs in the same Network as their subnets router interface.
That means setting the same Subnet Mask, and doing the usual Subnetting Magic for Machine A and R1

Copy and paste the Subnet Mask.
Notice its .128 again.
Be happy you got an easy one.
See in which range the IP of R1 is (126).
126 is in 1-126.
So we set A1 to:
92.128.98.1
255.255.255.128
Boom, connected to router. We are getting good at this.

-------------

Now, connecting B is a bit trickier, because it requires Supernetting instead of Subnetting.
We did this in one of the earlier exercises already, I think.
But I will clarify it here again.

We have our default Subnet Mask:
255.255.255.0
255.255.xxx.yyy
If we change the 4th column (y), then its subnetting.
This is what we did before, with the smaller host ranges, where we make more Subnets out of 1.
If we change the 3rd colum (x), then its Supernetting.
This is essentially the same as subnetting, but the other way around.
Instead of making our ranges smaller then 255, by halving it, we increase our ranges, by doubling them.

For Supernetting our range gets bigger then x.x.x.0 - x.x.x.255.
Naturally this means stealing some network bits, (the x here) to make room to store bigger numbers.
Simple example:
11111111 11111111 11111111 00000000 
-> 11111111 11111111 11111110 00000000

This means, we now use one more bit to store our host ranges.
In binary this is easy to understand, but in decimal its a bit tricker.
So let me give some examples:
Subnet 0: x.x.0.0 - x.x.1.255
Subnet 1: x.x.2.0 - x.x.3.255
...
Subnet 127: x.x.254.0 - x.x.255.255

So if you think about it, in binary we stole the 0/1 positions bit.
This means that only every second time we wrap around or 255, the Subnet actually changes.
Because only then do we change a host bit.

So now this behaviour results in 3 things:
1)	We got less subnets and more data ranges per subnet. How much more? 2^[amount of bits sacrificed] * 255
2)	We can use extremist values, if they are not at the end of the subnet.
	Example for Submask 255.255.254.0:
	Extreme values are: x.x.0.0 and x.x.1.255.
	This means we got to use extremists like x.x.0.255 and x.x.1.0
3)	Now the 3rd column of the IP might change, if we change the Host.
	This is like the inverted behaviour of our 4th column changing resulting in different Subnets.


So now we have a different formula for Data Ranges:

SUPERNETTING:
Mask -> CIDR:
Masks third bits:	.255.	.254.	.250.	.248.	.240.	.224.	.192.	.128.	.0.
Respective CIDR:	24		23		22		21		20		19		18		17		16
					1		2		4		8		16		32		64		128
example: .248 -> 21

Get exponent:
24 - CIDR
example: 24-21 = 3

Get size of data range:
2^(exponent)
example: 2^3 = 8

And thats basically it
Your size signifies the number in your third column, at which point you will enter a new subnet.
You now know that your data range goes from
x.x.0.0 to x.x.7.255
x.x.8.0 will be the first number in the next subnet, which is:
x.x.8.0 to x.x.15.255

You always start with your 4th column at 0, and your last number as 255.
Keep in mind this is WITH the extreme values.
So your actual data range should be something like:
x.x.0.1 to x.x.[size]-1.254

And of course, your data ranges repeat like this:
x.x.0*[size].1 to	x.x.1*[size]-1.254
x.x.1*[size].1 to	x.x.2*[size]-1.254
x.x.2*[size].1 to	x.x.3*[size]-1.254
...

So for our example, we have the SubnetMask 255.255.192.0
So we get a CIDR of 18, an exponent of 6, so a size of 2^6 = 64
Our data ranges are from
166.89.0.1		to 166.89.63.254
166.89.64.1		to 166.89.127.254
166.89.128.1	to 166.89.191.254
166.89.192.1	to 166.89.255.254

Our given Ip for R2 is 166.89.5.254, which is in the first data range.
So I will give our PC B1 the IP 166.89.63.254, as it is the last usable value
(and the mask /18)

So now both PCs should be able to connect to the router

---------

Now onto routing

Routing consists of two values
1)	The route, which defines the final adress you wish to connect to.
	For this, you usually choose the Adress of the Subnet, that your target Interface is in.
	By that I mean this subnets Network Adress. 
	Remember those extreme values for IP adresses, which we were not allowed to use?
	Yep, thats the one we need now.
	Essentially, we want the smallest possible IP for that Subnet, so we can send our packages there.
	From there, it is up to the Subnets devices, who wants this package.
	So we just find our data range for the current subject, and use the smallest / first value.
2)	The gate, also called Next-hop. Which defines the next interface to direct our traffic towards.
	If the Network Adress is the adress of the home to deliver the package to, then our gates
	are like roadsigns, that keep pointing in the direction we need to go, to move through the internet.
	If we want to route from a PC to outside the network, then we will need to set the gate as the IP of our subnets router interface.

So if we want to connect A1 towards B1, then we do:

For our route we will set the Network Adress of R2.
We know from before, that R2s IPs range from 166.89.0.0-166.89.63.255
(this is including extreme values)
So now the lowest possible value would be
166.89.0.0
Alternatively, you could get this value by setting all host bits to 0, and all network bits to 1.

For our gate, we know the IP adress of this subnets router interface, which is R1s address.
So 92.128.98.126

Now we are almost done with setting up this PCs routing, just one more thing remains.
Since the gate will always be the same Subnet Mask as our PCs, we wont need to say so in the routing.
Actually doing so will break our connection for some reason.
But for our route, we will be going to a different Subnet Mask. (/18 instead of /25)
So we say so in the IP

Final Route:
166.89.0.0/18 => 92.128.98.126
(go to the Network 166.89.0.0 with Mask 255.255.192.0 by moving through 92.128.98.126)

Next, we will connect our B1 machine.
So we would do the exact same thing here.
Our route will be R1s Network Adress, which will be
92.128.98.0
with the Mask 255.255.255.128 or /25
92.128.98.0/25

However, we already have a route set up, "default".
To explain the usage, we need to establish one more thing about routing: the package.
Its not exactly like a real package, since apart from the route and gate, interfaces can also view some contents.
Specifically, there will always be a target adress inside our package.
This specifies the specific adress, like google, amazon or reddit.com.
If our router does not have a specific route towards any of theese sites, then it will falla back to "default".
Which means handing our package to your local ISP, which looks at the final address and then routes it accordingly.

For our example, this just means that we assume that our package specifies that it wants to go to A1 from B1.
Then our package will be sent to next hop, which is our router, who will look in the package, and route it accordingly.

So that means we only need to take care of the gate for B1.
We know B1s interface is R2, which has an IP of 166.89.5.254

So we set that and viola, bongornio, our connection between both PCs is established.